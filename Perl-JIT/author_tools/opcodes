# AST op definitions, one per line. "C flags" is the actual C flags written to
# the output file for runtime properties. "options" contols generation behaviour.
# Use | chars to separate flags and options.

# Options:
# - emit => actually emit as code to include for main OP switch in src/pj_optree.c

# Alas, the order is important. Keep unops/binops/listops together, please.

# AST op, AST op class, op name, Perl OP, C flags, options

# unops
pj_unop_negate,		pj_opc_unop,	unary -,	OP_NEGATE, 	0,	emit
pj_unop_sin,		pj_opc_unop,	sin,		OP_SIN,		0,	emit
pj_unop_cos,		pj_opc_unop,	cos,		OP_COS,		0,	emit
pj_unop_abs,		pj_opc_unop,	abs,		OP_ABS,		0,	emit
pj_unop_sqrt,		pj_opc_unop,	sqrt,		OP_SQRT,	0,	emit
pj_unop_log,		pj_opc_unop,	log,		OP_LOG,		0,	emit
pj_unop_exp,		pj_opc_unop,	exp,		OP_EXP,		0,	emit
pj_unop_perl_int,	pj_opc_unop,	int,		OP_INT,		0,	emit
pj_unop_bitwise_not,	pj_opc_unop,	~,		OP_COMPLEMENT,	0,	emit
pj_unop_bool_not,	pj_opc_unop,	!,		OP_NOT,		0,	emit
pj_unop_defined,	pj_opc_unop,	defined,	OP_DEFINED,	0,	emit
pj_unop_rand,		pj_opc_unop,	rand,		OP_RAND,	PJ_ASTf_KIDS_OPTIONAL,	emit
pj_unop_srand,		pj_opc_unop,	srand,		OP_SRAND,	PJ_ASTf_KIDS_OPTIONAL,	emit

# binops
pj_binop_add,		pj_opc_binop,	+,		OP_ADD,		0,	emit
pj_binop_subtract,	pj_opc_binop,	-,		OP_SUBTRACT,	0,	emit
pj_binop_multiply,	pj_opc_binop,	*,		OP_MULTIPLY,	0,	emit
pj_binop_divide,	pj_opc_binop,	/,		OP_DIVIDE,	0,	emit
pj_binop_modulo,	pj_opc_binop,	%,		OP_MODULO,	0,	emit
pj_binop_atan2,		pj_opc_binop,	atan2,		OP_ATAN2,	0,	emit
pj_binop_pow,		pj_opc_binop,	pow,		OP_POW,		0,	emit
pj_binop_left_shift,	pj_opc_binop,	<<,		OP_LEFT_SHIFT,	0,	emit
pj_binop_right_shift,	pj_opc_binop,	>>,		OP_RIGHT_SHIFT,	0,	emit
pj_binop_bitwise_and,	pj_opc_binop,	&,		OP_BIT_AND,	0,	emit
pj_binop_bitwise_or,	pj_opc_binop,	|,		OP_BIT_OR,	0,	emit
pj_binop_bitwise_xor,	pj_opc_binop,	^,		OP_BIT_XOR,	0,	emit
pj_binop_num_eq,	pj_opc_binop,	==,		OP_EQ,		0,	emit
pj_binop_num_ne,	pj_opc_binop,	!=,		OP_NE,		0,	emit
pj_binop_num_lt,	pj_opc_binop,	<,		OP_LT,		0,	emit
pj_binop_num_le,	pj_opc_binop,	<=,		OP_LE,		0,	emit
pj_binop_num_gt,	pj_opc_binop,	>,		OP_GT,		0,	emit
pj_binop_num_ge,	pj_opc_binop,	>=,		OP_GE,		0,	emit
pj_binop_num_cmp,	pj_opc_binop,	<=>,		OP_NCMP,	0,	emit
pj_binop_str_eq,	pj_opc_binop,	eq,		OP_SEQ,		0,	emit
pj_binop_str_ne,	pj_opc_binop,	ne,		OP_SNE,		0,	emit
pj_binop_str_lt,	pj_opc_binop,	lt,		OP_SLT,		0,	emit
pj_binop_str_le,	pj_opc_binop,	le,		OP_SLE,		0,	emit
pj_binop_str_gt,	pj_opc_binop,	gt,		OP_SGT,		0,	emit
pj_binop_str_ge,	pj_opc_binop,	ge,		OP_SGE,		0,	emit
pj_binop_str_cmp,	pj_opc_binop,	cmp,		OP_SCMP,	0,	emit
pj_binop_bool_and,	pj_opc_binop,	&&,		OP_AND,		PJ_ASTf_KIDS_CONDITIONAL,	emit
pj_binop_bool_or,	pj_opc_binop,	||,		OP_OR,		PJ_ASTf_KIDS_CONDITIONAL,	emit

# listops
pj_listop_ternary,	pj_opc_listop,	?:,		OP_COND_EXPR,	PJ_ASTf_KIDS_CONDITIONAL,	emit
