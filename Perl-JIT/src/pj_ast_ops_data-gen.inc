#ifndef PJ_AST_OPS_DATA_GEN_INC_
#define PJ_AST_OPS_DATA_GEN_INC_
// WARNING: Do not modify this file, it is generated!
// Modify the generating script author_tools/regen_opcodes.pl and its data file
// "author_tools/opcodes" instead!

static const char *pj_ast_op_names[] = {
  "unary -",   // pj_unop_negate       (pj_opc_unop)
  "sin",       // pj_unop_sin          (pj_opc_unop)
  "cos",       // pj_unop_cos          (pj_opc_unop)
  "abs",       // pj_unop_abs          (pj_opc_unop)
  "sqrt",      // pj_unop_sqrt         (pj_opc_unop)
  "log",       // pj_unop_log          (pj_opc_unop)
  "exp",       // pj_unop_exp          (pj_opc_unop)
  "int",       // pj_unop_perl_int     (pj_opc_unop)
  "~",         // pj_unop_bitwise_not  (pj_opc_unop)
  "!",         // pj_unop_bool_not     (pj_opc_unop)
  "defined",   // pj_unop_defined      (pj_opc_unop)
  "rand",      // pj_unop_rand         (pj_opc_unop)
  "srand",     // pj_unop_srand        (pj_opc_unop)
  "hex",       // pj_unop_hex          (pj_opc_unop)
  "oct",       // pj_unop_oct          (pj_opc_unop)
  "length",    // pj_unop_length       (pj_opc_unop)
  "ord",       // pj_unop_ord          (pj_opc_unop)
  "chr",       // pj_unop_chr          (pj_opc_unop)
  "lc",        // pj_unop_lc           (pj_opc_unop)
  "uc",        // pj_unop_uc           (pj_opc_unop)
  "lcfirst",   // pj_unop_lcfirst      (pj_opc_unop)
  "ucfirst",   // pj_unop_ucfirst      (pj_opc_unop)
  "quotemeta", // pj_unop_quotemeta    (pj_opc_unop)
  "++()",      // pj_unop_preinc       (pj_opc_unop)
  "()++",      // pj_unop_postinc      (pj_opc_unop)
  "--()",      // pj_unop_predec       (pj_opc_unop)
  "()--",      // pj_unop_postdec      (pj_opc_unop)
  "undef()",   // pj_unop_undef        (pj_opc_unop)
  "sv_deref",  // pj_unop_sv_deref     (pj_opc_unop)
  "sv_ref",    // pj_unop_sv_ref       (pj_opc_unop)
  "+",         // pj_binop_add         (pj_opc_binop)
  "-",         // pj_binop_subtract    (pj_opc_binop)
  "*",         // pj_binop_multiply    (pj_opc_binop)
  "/",         // pj_binop_divide      (pj_opc_binop)
  "%",         // pj_binop_modulo      (pj_opc_binop)
  "atan2",     // pj_binop_atan2       (pj_opc_binop)
  "pow",       // pj_binop_pow         (pj_opc_binop)
  "<<",        // pj_binop_left_shift  (pj_opc_binop)
  ">>",        // pj_binop_right_shift (pj_opc_binop)
  "&",         // pj_binop_bitwise_and (pj_opc_binop)
  "|",         // pj_binop_bitwise_or  (pj_opc_binop)
  "^",         // pj_binop_bitwise_xor (pj_opc_binop)
  "==",        // pj_binop_num_eq      (pj_opc_binop)
  "!=",        // pj_binop_num_ne      (pj_opc_binop)
  "<",         // pj_binop_num_lt      (pj_opc_binop)
  "<=",        // pj_binop_num_le      (pj_opc_binop)
  ">",         // pj_binop_num_gt      (pj_opc_binop)
  ">=",        // pj_binop_num_ge      (pj_opc_binop)
  "<=>",       // pj_binop_num_cmp     (pj_opc_binop)
  "eq",        // pj_binop_str_eq      (pj_opc_binop)
  "ne",        // pj_binop_str_ne      (pj_opc_binop)
  "lt",        // pj_binop_str_lt      (pj_opc_binop)
  "le",        // pj_binop_str_le      (pj_opc_binop)
  "gt",        // pj_binop_str_gt      (pj_opc_binop)
  "ge",        // pj_binop_str_ge      (pj_opc_binop)
  "cmp",       // pj_binop_str_cmp     (pj_opc_binop)
  "&&",        // pj_binop_bool_and    (pj_opc_binop)
  "||",        // pj_binop_bool_or     (pj_opc_binop)
  "//",        // pj_binop_definedor   (pj_opc_binop)
  "concat",    // pj_binop_concat      (pj_opc_binop)
  "?:",        // pj_listop_ternary    (pj_opc_listop)
  "substr",    // pj_listop_substr     (pj_opc_listop)
  "chop",      // pj_listop_chop       (pj_opc_listop)
  "chomp",     // pj_listop_chomp      (pj_opc_listop)
};

static unsigned int pj_ast_op_flags[] = {
  0,                        // pj_unop_negate       (pj_opc_unop)
  PJ_ASTf_KIDS_OPTIONAL,    // pj_unop_sin          (pj_opc_unop)
  PJ_ASTf_KIDS_OPTIONAL,    // pj_unop_cos          (pj_opc_unop)
  PJ_ASTf_KIDS_OPTIONAL,    // pj_unop_abs          (pj_opc_unop)
  PJ_ASTf_KIDS_OPTIONAL,    // pj_unop_sqrt         (pj_opc_unop)
  PJ_ASTf_KIDS_OPTIONAL,    // pj_unop_log          (pj_opc_unop)
  PJ_ASTf_KIDS_OPTIONAL,    // pj_unop_exp          (pj_opc_unop)
  PJ_ASTf_KIDS_OPTIONAL,    // pj_unop_perl_int     (pj_opc_unop)
  0,                        // pj_unop_bitwise_not  (pj_opc_unop)
  0,                        // pj_unop_bool_not     (pj_opc_unop)
  PJ_ASTf_KIDS_OPTIONAL,    // pj_unop_defined      (pj_opc_unop)
  PJ_ASTf_KIDS_OPTIONAL,    // pj_unop_rand         (pj_opc_unop)
  PJ_ASTf_KIDS_OPTIONAL,    // pj_unop_srand        (pj_opc_unop)
  PJ_ASTf_KIDS_OPTIONAL,    // pj_unop_hex          (pj_opc_unop)
  PJ_ASTf_KIDS_OPTIONAL,    // pj_unop_oct          (pj_opc_unop)
  PJ_ASTf_KIDS_OPTIONAL,    // pj_unop_length       (pj_opc_unop)
  PJ_ASTf_KIDS_OPTIONAL,    // pj_unop_ord          (pj_opc_unop)
  PJ_ASTf_KIDS_OPTIONAL,    // pj_unop_chr          (pj_opc_unop)
  PJ_ASTf_KIDS_OPTIONAL,    // pj_unop_lc           (pj_opc_unop)
  PJ_ASTf_KIDS_OPTIONAL,    // pj_unop_uc           (pj_opc_unop)
  PJ_ASTf_KIDS_OPTIONAL,    // pj_unop_lcfirst      (pj_opc_unop)
  PJ_ASTf_KIDS_OPTIONAL,    // pj_unop_ucfirst      (pj_opc_unop)
  PJ_ASTf_KIDS_OPTIONAL,    // pj_unop_quotemeta    (pj_opc_unop)
  0,                        // pj_unop_preinc       (pj_opc_unop)
  0,                        // pj_unop_postinc      (pj_opc_unop)
  0,                        // pj_unop_predec       (pj_opc_unop)
  0,                        // pj_unop_postdec      (pj_opc_unop)
  PJ_ASTf_KIDS_OPTIONAL,    // pj_unop_undef        (pj_opc_unop)
  0,                        // pj_unop_sv_deref     (pj_opc_unop)
  0,                        // pj_unop_sv_ref       (pj_opc_unop)
  0,                        // pj_binop_add         (pj_opc_binop)
  0,                        // pj_binop_subtract    (pj_opc_binop)
  0,                        // pj_binop_multiply    (pj_opc_binop)
  0,                        // pj_binop_divide      (pj_opc_binop)
  0,                        // pj_binop_modulo      (pj_opc_binop)
  0,                        // pj_binop_atan2       (pj_opc_binop)
  0,                        // pj_binop_pow         (pj_opc_binop)
  0,                        // pj_binop_left_shift  (pj_opc_binop)
  0,                        // pj_binop_right_shift (pj_opc_binop)
  0,                        // pj_binop_bitwise_and (pj_opc_binop)
  0,                        // pj_binop_bitwise_or  (pj_opc_binop)
  0,                        // pj_binop_bitwise_xor (pj_opc_binop)
  0,                        // pj_binop_num_eq      (pj_opc_binop)
  0,                        // pj_binop_num_ne      (pj_opc_binop)
  0,                        // pj_binop_num_lt      (pj_opc_binop)
  0,                        // pj_binop_num_le      (pj_opc_binop)
  0,                        // pj_binop_num_gt      (pj_opc_binop)
  0,                        // pj_binop_num_ge      (pj_opc_binop)
  0,                        // pj_binop_num_cmp     (pj_opc_binop)
  0,                        // pj_binop_str_eq      (pj_opc_binop)
  0,                        // pj_binop_str_ne      (pj_opc_binop)
  0,                        // pj_binop_str_lt      (pj_opc_binop)
  0,                        // pj_binop_str_le      (pj_opc_binop)
  0,                        // pj_binop_str_gt      (pj_opc_binop)
  0,                        // pj_binop_str_ge      (pj_opc_binop)
  0,                        // pj_binop_str_cmp     (pj_opc_binop)
  PJ_ASTf_KIDS_CONDITIONAL, // pj_binop_bool_and    (pj_opc_binop)
  PJ_ASTf_KIDS_CONDITIONAL, // pj_binop_bool_or     (pj_opc_binop)
  PJ_ASTf_KIDS_CONDITIONAL, // pj_binop_definedor   (pj_opc_binop)
  0,                        // pj_binop_concat      (pj_opc_binop)
  PJ_ASTf_KIDS_CONDITIONAL, // pj_listop_ternary    (pj_opc_listop)
  0,                        // pj_listop_substr     (pj_opc_listop)
  0,                        // pj_listop_chop       (pj_opc_listop)
  0,                        // pj_listop_chomp      (pj_opc_listop)
};

#endif
