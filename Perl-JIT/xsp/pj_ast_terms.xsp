%module{Perl::JIT};

#include "pj_ast_terms.h"
#include "xsp_typedefs.h"

/* map op to B::*OP class name */
#include "opclass.h"

class Perl::JIT::AST::Term {
  pj_term_type type %get %set;
  OP *perl_op %get %set;
  OP *start_op();
  Perl::JIT::AST::Type *get_value_type();
  std::vector<Perl::JIT::AST::Term *> get_kids()
    %code{% PERL_UNUSED_VAR(THIS); %};

  void dump();
};

class Perl::JIT::AST::Op : public Perl::JIT::AST::Term
{
  pj_op_type optype %get %set;
  std::vector<Perl::JIT::AST::Term *> kids %get;

  const char * name() const;
  pj_op_class op_class() const;
  bool evaluates_kids_conditionally() const
    %code{% RETVAL = THIS->flags() & PJ_ASTf_KIDS_CONDITIONAL; %};

  bool kids_are_optional() const
    %code{% RETVAL = THIS->flags() & PJ_ASTf_KIDS_OPTIONAL; %};

  bool may_have_explicit_overload() const
    %code{% RETVAL = THIS->flags() & PJ_ASTf_OVERLOAD; %};
};

class Perl::JIT::AST::Unop : public Perl::JIT::AST::Op
{
  Perl::JIT::AST::Term *get_kid() %code{% RETVAL = THIS->kids[0]; %};
  void set_kid(Perl::JIT::AST::Term *k) %code{% THIS->kids[0] = k; %};
};

class Perl::JIT::AST::Binop : public Perl::JIT::AST::Op
{
  bool is_assignment_form();

  Perl::JIT::AST::Term *get_left_kid() %code{% RETVAL = THIS->kids[0]; %};
  void set_left_kid(Perl::JIT::AST::Term *k) %code{% THIS->kids[0] = k; %};

  Perl::JIT::AST::Term *get_right_kid() %code{% RETVAL = THIS->kids[1]; %};
  void set_right_kid(Perl::JIT::AST::Term *k) %code{% THIS->kids[1] = k; %};
};

class Perl::JIT::AST::Listop : public Perl::JIT::AST::Op
{};

class Perl::JIT::AST::Constant : public Perl::JIT::AST::Term
{
  pj_type_id const_type() %code{% RETVAL = THIS->get_value_type()->tag(); %};
};

class Perl::JIT::AST::NumericConstant : public Perl::JIT::AST::Constant
{
  double dbl_value %get %set;
  int int_value %get %set;
  unsigned int uint_value %get %set;
};

class Perl::JIT::AST::StringConstant : public Perl::JIT::AST::Constant
{
  std::string string_value %get %set;
  bool is_utf8 %get %set;
};

class Perl::JIT::AST::UndefConstant : public Perl::JIT::AST::Constant
{
};

class Perl::JIT::AST::Identifier : public Perl::JIT::AST::Term
{
};

class Perl::JIT::AST::VariableDeclaration : public Perl::JIT::AST::Identifier
{
  int ivar %get %set;
};

class Perl::JIT::AST::Variable : public Perl::JIT::AST::Identifier
{
  Perl::JIT::AST::VariableDeclaration *declaration %get;
  int get_ivar() const %code{% RETVAL = THIS->declaration->ivar; %};
};

class Perl::JIT::AST::Optree : public Perl::JIT::AST::Term
{
};

class Perl::JIT::AST::NullOptree : public Perl::JIT::AST::Term
{
};
