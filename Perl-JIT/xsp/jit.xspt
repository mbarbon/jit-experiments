%loadplugin{feature::default_xs_typemap};

%typemap{SV *}{simple};
%typemap{std::string}{simple};

%typemap{pj_op_type}{simple}{
    %xs_type{T_ENUM};
};

%typemap{pj_term_type}{simple}{
    %xs_type{T_ENUM};
};

%typemap{pj_type_id}{simple}{
    %xs_type{T_ENUM};
};

%typemap{pj_op_class}{simple}{
    %xs_type{T_ENUM};
};

%typemap{pj_op_context}{simple}{
    %xs_type{T_ENUM};
};

%typemap{pj_variable_sigil}{simple}{
    %xs_type{T_ENUM};
};

%typemap{Perl::JIT::AST::Term *}{object}{
    %xs_type{O_AST};
    %xs_output_code{% sv_setref_pv( $arg, xsp_constructor_class($var->perl_class()), (void*)$var ); %};
};

%typemap{Perl::JIT::AST::Type *}{object}{
    %xs_type{O_TYPE};
    %xs_output_code{% sv_setref_pv( $arg, xsp_constructor_class($var ? $var->perl_class() : "Perl::JIT::AST::Type"), (void*)$var ); %};
};

%typemap{std::vector<Perl::JIT::AST::Term *>}{parsed}{
  %cpp_type{%std::vector<PerlJIT::AST::Term *>%};
  %output_list{%
    const unsigned int n = $CVar.size();
    EXTEND(SP, n);
    for (unsigned int i = 0; i < n; ++i) {
      PerlJIT::AST::Term *t = $CVar[i];
      SV *retval = sv_newmortal();
      sv_setref_pv( retval, xsp_constructor_class(t->perl_class()), (void*)t );
      PUSHs(retval);
    }
  %};
};

%typemap{OP *}{simple}{
    %name{OP};
    %xs_type{T_OP};
    %xs_input_code{%
        if (SvROK($arg)) {
            IV tmp = SvIV((SV*)SvRV($arg));
            $var = INT2PTR($type,tmp);
        }
        else
            croak(\"$var is not a reference\")
    %};
    %xs_output_code{%
        sv_setiv(newSVrv($arg, cc_opclassname(aTHX_ $var)), PTR2IV($var));
    %};
};

%typemap{GV *}{simple}{
    %name{GV};
    %xs_type{T_GV};
    %xs_input_code{%
        if (SvROK($arg)) {
            IV tmp = SvIV((SV*)SvRV($arg));
            $var = INT2PTR($type,tmp);
        }
        else
            croak(\"$var is not a reference\")
    %};
    %xs_output_code{%
        sv_setiv(newSVrv($arg, "B::GV"), PTR2IV($var));
    %};
};
